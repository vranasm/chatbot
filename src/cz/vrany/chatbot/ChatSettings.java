/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.vrany.chatbot;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.Timer;

/**
 *
 * @author michal
 */
public class ChatSettings extends javax.swing.JFrame implements TwitchChatListener, HostListener {

    static boolean AA;

    IniFile settings;
    List<String> moderators = new LinkedList<>();
    HashMap<String, User> users;
    //String NICK = "vranasm";
    //String PASS = "oauth:q33u7aiz7zhwel9bfrasbz7bcwgt90";
    //String CHAN = "#wonkywobblar";

    Thread tdtwchat;
    TwitchChat twChat;
    Timer timer;
    Timer hostsTimer;
    HostsTracking hostsTracking;
    List<HostDescription> hosts;

    private class HostDescription {

        TwitchChat chat;
        Thread thread;

        public HostDescription(TwitchChat chat, Thread thread) {
            this.chat = chat;
            this.thread = thread;
        }
    }

    /**
     * Creates new form ChatSettings
     *
     * @param chat
     */
    public ChatSettings() {
        this.users = new HashMap<>();
        settings = new IniFile("./settings.ini");
        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        chatPanel.setScreenDimension(screenSize);
        setLocationRelativeTo(null);
        int x = getX();
        int y = getY();
        general.loadSettings(settings);
        chatPanel.loadSettings(settings);
        obsPanel.loadSettings(settings);
        iconsPanel.load();
        ignoredUsersPanel.load();
        patternsPanel.load(settings);
        String inp;
        inp = settings.getKeyValue("ChatSettings", "xpos", "100");
        try {
            x = Integer.parseInt(inp);
        } catch (NumberFormatException ex) {
        }
        inp = settings.getKeyValue("ChatSettings", "ypos", "100");
        try {
            y = Integer.parseInt(inp);
        } catch (NumberFormatException ex) {
        }
        setLocation(x, y);
        pack();
        timer = new Timer(500, new ConnectedTimer());
        timer.start();
        general.addConnectButtonActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                connectPressed();
            }
        });
        general.addDisconnectButtonActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                disconnectPressed();
            }
        });
        hostsTracking = new HostsTracking(this);
        hostsTracking.addHostListener(this);
        hostsTimer = new Timer(10000, hostsTracking);
        hosts = new LinkedList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPane = new javax.swing.JTabbedPane();
        general = new cz.vrany.chatbot.General();
        chatPanel = new cz.vrany.chatbot.ChatPanel();
        obsPanel = new cz.vrany.chatbot.OBSPanel();
        iconsPanel = new cz.vrany.chatbot.IconsPanel();
        ignoredUsersPanel = new cz.vrany.chatbot.IgnoredPanel();
        patternsPanel = new cz.vrany.chatbot.PatternsPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat settings");

        tabPane.addTab("General", general);
        tabPane.addTab("Chat", chatPanel);
        tabPane.addTab("OBS", obsPanel);
        tabPane.addTab("Icons", iconsPanel);
        tabPane.addTab("Ignored users", ignoredUsersPanel);
        tabPane.addTab("Patterns", patternsPanel);

        getContentPane().add(tabPane, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new javax.swing.OverlayLayout(jPanel1));

        jButton1.setText("Save settings");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        saveSettings();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private cz.vrany.chatbot.ChatPanel chatPanel;
    private cz.vrany.chatbot.General general;
    private cz.vrany.chatbot.IconsPanel iconsPanel;
    private cz.vrany.chatbot.IgnoredPanel ignoredUsersPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private cz.vrany.chatbot.OBSPanel obsPanel;
    private cz.vrany.chatbot.PatternsPanel patternsPanel;
    private javax.swing.JTabbedPane tabPane;
    // End of variables declaration//GEN-END:variables

    protected void connectPressed() {
        closeConnection();
        twChat = general.newTwitchChat();
        twChat.addTwitchChatListener(this);
        tdtwchat = new Thread(twChat);
        tdtwchat.start();
        hostsTracking.clear();
        hostsTimer.start();
    }

    protected void disconnectPressed() {
        closeConnection();
    }

    protected void saveSettings() {
        general.saveSettings(settings);
        chatPanel.saveSettings(settings);
        obsPanel.saveSettings(settings);
        settings.setValue("ChatSettings", "xpos", String.valueOf(getX()));
        settings.setValue("ChatSettings", "ypos", String.valueOf(getY()));
        settings.saveIniFile("./settings.ini");
        iconsPanel.save();
        ignoredUsersPanel.save();
        patternsPanel.save(settings);
    }

    private void closeConnection() {
        for (HostDescription hd : hosts) {
            hd.thread.interrupt();
            hd.chat.removeTwitchChatListener(this);
            hd.chat.end();
            hd.chat.free();
        }
        hosts.clear();
        if (twChat != null) {
            twChat.end();
            tdtwchat.interrupt();
            twChat.free();
            tdtwchat = null;
            twChat = null;
        }
        hostsTimer.stop();
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void onJoin(TwitchChatEvent evt) {
        User user = users.get(evt.user);
        if (user == null) {
            ImageIcon icon = iconsPanel.getUserIcon(evt.user);
            user = new User(evt.user, getNewColor(), icon);
            chatPanel.onJoin(evt, evt.getSource() != twChat);
            users.put(evt.user, user);
        }
    }

    @Override
    public void onMessage(TwitchChatEvent evt) {
        if (ignoredUsersPanel.control(evt.user)) {
            return;
        }
        boolean flag = false;
        //if (!moderators.contains(evt.user)) {
        flag = patternsPanel.control(evt.message);
        //}
        if (!flag) {
            User usr = users.get(evt.user);
            if (usr == null) {
                ImageIcon icon = iconsPanel.getUserIcon(evt.user);
                usr = new User(evt.user, getNewColor(), icon);
                users.put(evt.user, usr);
            }
            boolean catchPhrase = patternsPanel.hasCatchPhrase(evt.message);
            chatPanel.onMessage(evt.getSource() != twChat, catchPhrase, usr, evt.message);
            obsPanel.onMessage(evt.getSource() != twChat, catchPhrase, usr, evt.message);
        }
    }

    @Override
    public void onClose(TwitchChatEvent evt) {
        ((TwitchChat) evt.getSource()).removeTwitchChatListener(this);
    }

    @Override
    public void onCommand(TwitchChatEvent evt) {
        if (ignoredUsersPanel.control(evt.user)) {
            return;
        }
        if (evt.message.startsWith("!icon")) {
            String[] split = evt.message.split(" ");
            if (split.length == 2) {
                try {
                    int icon = Integer.parseInt(split[1]);
                    iconsPanel.changeUserIcon(evt.user, icon);
                    User user = users.get(evt.user);
                    if (user != null) {
                        user.setIcon(iconsPanel.getUserIcon(evt.user));
                    }
                } catch (NumberFormatException ex) {

                }
            }
        }
    }

    @Override
    public void onModerator(TwitchChatEvent evt) {
        moderators.add(evt.user);
    }

    @Override
    public void onColor(TwitchChatEvent evt) {
        /*        Color color = new Color(
         Integer.valueOf(evt.message.substring(0, 2), 16),
         Integer.valueOf(evt.message.substring(2, 4), 16),
         Integer.valueOf(evt.message.substring(4, 6), 16));
         if (color.equals(obsPanel.obs.background)) {
         color = chatPanel.getDefaultColor();
         }
         User user = users.get(evt.user);
         if (user == null) {
         //new user
         ImageIcon icon = iconsPanel.getUserIcon(evt.user);
         user = new User(false, evt.user, color, icon);
         users.put(evt.user, user);
         } else {
         //adjust color
         user.setDefColor(false);
         user.setColor(color);
         }
         */
    }

    private Color getNewColor() {
        Color clr = general.getNewColor();
        if (clr == null) {
            return chatPanel.getSystemColor();
        }
        return clr;
    }

    String getChannelName() {
        return general.getChannelName();
    }

    String getOauth() {
        return general.getOauth();
    }

    @Override
    public void hostStarted(HostEvent evt) {
        TwitchChat chat = new TwitchChat(general.getUsername(), general.getOauth(), evt.name);
        chat.addTwitchChatListener(this);
        Thread thread = new Thread(chat);
        HostDescription hd = new HostDescription(chat, thread);
        hosts.add(hd);
        thread.start();
    }

    @Override
    public void hostEnded(HostEvent evt) {
        HostDescription host = null;
        for (HostDescription hd : hosts) {
            if (hd.chat.channel.equals(evt.name)) {
                host = hd;
                break;
            }
        }
        if (host != null) {
            host.thread.interrupt();
            host.chat.removeTwitchChatListener(this);
            host.chat.end();
            host.chat.free();
            hosts.remove(host);
        }
    }

    private class ConnectedTimer implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (tdtwchat != null) {
                if (tdtwchat.isAlive()) {
                    general.setConnectionStatus(General.STATUS_CONNECTED_ALIVE);
                } else {
                    general.setConnectionStatus(General.STATUS_CONNECTED_NALIVE);
                }
            } else {
                general.setConnectionStatus(General.STATUS_NOT_CONNECTED);
            }
        }

    }
}
